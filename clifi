#!/usr/bin/env -S python3 -B
from subprocess import Popen, STDOUT
from os import devnull, remove
from os.path import exists
from sys import stderr, platform
from argparse import ArgumentParser
from json import load as json_load
from json import dump as json_dump

parser = ArgumentParser(description='clifi: play your favorite streams straight from the command line')

parser.add_argument('stream',
                    help='stream name [lofi-main, lofi-chill]',
                    type=str,
                    nargs='?',
                    default='default')
parser.add_argument('--version',
                    help='print program version',
                    action='store_true')
parser.add_argument('-v', '--verbose',
                    help='be verbose', 
                    action='store_true')
parser.add_argument('-k', '--kill',
                    help='kill an active session',
                    action='store_true')
parser.add_argument('-n', '--new-stream',
                    help='add a new stream to \'streams.json\'',
                    action='store_true')
parser.add_argument('--full-name',
                    help='return full stream name',
                    action='store_true')
parser.add_argument('--url',
                    help='return stream URL',
                    action='store_true')
parser.add_argument('--devel',
                    help='for development use only, serves no purpose in regular releases',
                    action='store_true')

args = parser.parse_args()

def v_print(type, output): # verbose printouts
        if args.verbose:
            if type == 's':
                print("SUCCESS: {}".format(output))
            if type == 'a':
                print("ALERT: {}".format(output))
            if type == 'e':
                print("ERR: {}".format(output))
            if type == 'f':
                print("FAIL: {}".format(output))

def write_json(data): 
        with open('streams.json','w') as f: 
            json_dump(data, f, indent=4) 


def main():

    with open('streams.json') as f:
        streams = json_load(f)

    for i in range(len(streams['streams'])):
        if args.stream == 'default':
            stream_name = 'lofi-main'
        else:
            stream_name = args.stream

        if streams['streams'][i]['name'] == stream_name:
            stream_url = streams['streams'][i]['url']

    try: # Linux
        open('/usr/bin/cvlc', 'r')
        v_print('s', '/usr/bin/cvlc found!')

        if args.stream == 'default':
            args.stream = 'lofi-main'
            v_print('a', "no stream entered...")
            v_print('a', "starting default stream '{}' from {}".format(args.stream, stream_url))
        else:
            v_print('a', "starting stream '{}' from {}".format(args.stream, stream_url))
        
        Popen("cvlc -q --no-video {} &".format(stream_url), shell=True, stdout=open(devnull, 'w'), stderr=STDOUT) # run vlc quietly in the background

    except:
        v_print('e', '/usr/bin/cvlc not found!')
        try: # macOS
            open('/Applications/VLC.app/Contents/MacOS/VLC', 'r')
            Popen("/Applications/VLC.app/Contents/MacOS/VLC -I dummy -q --no-video https://www.youtube.com/watch?v=5qap5aO4i9A &", shell=True, stdout=open(devnull, 'w'), stderr=STDOUT) # run vlc quietly in the background
        except:
            v_print('e', '/Applications/VLC.app/Contents/MacOS/VLC not found!')
        v_print('f', 'no suitable execution candidates found')
        exit("'vlc' needs to be installed on the system")

    

if __name__ == '__main__':

    if args.devel:
        with open('streams.json') as f:
            streams = json_load(f)
        
        for i in range(len(streams)):
            if streams['streams'][i]['name'] == 'lofi-breeze':
                print('ok')
                exit(0)
        exit(0)
    
    if args.full_name:
        with open('streams.json') as f:
            streams = json_load(f)
        
        for i in range(len(streams)):
            if streams['streams'][i]['name'] == args.stream:
                print('The full name for \'{}\' is \'{}\''.format(args.stream, streams['streams'][i]['full-name']))
                exit(0)
    
    if args.url:
        with open('streams.json') as f:
            streams = json_load(f)
        
        for i in range(len(streams)):
            if streams['streams'][i]['name'] == args.stream:
                print('The URL for \'{}\' is \'{}\''.format(args.stream, streams['streams'][i]['url']))
                exit(0)

    if args.new_stream:
        stream_name = input('Short name for stream (this is the name you\'ll use to launch the stream): ')
        stream_full_name = input('Full name of stream (not required, will only be used when \'--full-name\' argument is called): ')
        stream_url = input('Stream URL: ')

        with open('streams.json') as f: 
            data = json_load(f) 
            inject = {"name":stream_name, "full-name":stream_full_name, "url":stream_url}
            data['streams'].append(inject)
        
        try:
            write_json(data)
        except:
            exit('failed to write data to \'streams.json\'')
        
        print('Successfully added {} to stream list!'.format(stream_name))
        exit(0)

    if args.version:
        stderr.write('clifi 420.3 - this version is hella wavy\n')
        stderr.flush()
        exit(0)

    if args.kill:
        v_print('a', 'attempting to kill all vlc instances')

        if platform == 'linux':
            killall = Popen('killall vlc', shell=True, stdout=open(devnull, 'w'), stderr=STDOUT)
        elif platform == 'darwin': # because macOS is lame and has to be different
            killall = Popen('killall VLC', shell=True, stdout=open(devnull, 'w'), stderr=STDOUT)

        killall.communicate()[0]
        if killall.returncode != 0:
            exit('no instances currently running...')
        else:
            v_print('s', 'killed running vlc instances')

        try:
            v_print('a', 'attempting to remove \'/tmp/clifi.lck\'')
            remove('/tmp/clifi.lck')
            exit(0)
        except OSError:
            exit('\'/tmp/clifi.lck\' not found...')

    if exists('/tmp/clifi.lck'):
        print('sorry, it looks like there\'s already an instance running...')
        exit('if not, delete \'/tmp/clifi.lck\' and try again')
    else:
        open('/tmp/clifi.lck', 'w').close()
        main()
